# NO FOMO – Visual Style Guide & Front‑End Kit (v0.1)

This doc contains the visual language, Tailwind token setup, and the "slick JS" utilities + React scaffolding for the NO FOMO MVP.

---

## 1) Visual System

### Brand principles

* **Confident dopamine**: calm fintech base, emotional accent flips on result.
* **Minimal, readable, fast**: fewer borders, more spacing, high contrast.
* **Numbers first**: use tabular numerals; avoid layout shift when values change.

### Color tokens (CSS variables)

* **Primary Blue** `#3371D4`
* **Profit Green** `#18B07A`
* **Loss Red** `#E45858`
* **Light Background** `#F9FAFC`
* **Dark Background** `#0B1320`

We expose tokens as RGB triplets for Tailwind opacity support.

```css
/* src/theme.css */
:root {
  /* base brand */
  --primary: 51 113 212;   /* #3371D4 */
  --success: 24 176 122;   /* #18B07A */
  --danger: 228 88 88;     /* #E45858 */

  /* surfaces & text */
  --bg: 249 250 252;       /* #F9FAFC */
  --bg-dark: 11 19 32;     /* #0B1320 */
  --fg: 15 23 42;          /* slate-900-ish */
  --muted: 100 116 139;    /* slate-500-ish */

  /* dynamic accent (changes with mode) */
  --accent: var(--primary);

  /* motion */
  --ease: cubic-bezier(0.22, 1, 0.36, 1);
  --dur-fast: 200ms;
  --dur-base: 300ms;
}

/***** Theme modes *****/
/* Base (neutral/blue) */
[data-mode="base"] {
  --accent: var(--primary);
}
/* Profit/Growth */
[data-mode="profit"] {
  --accent: var(--success);
}
/* Loss */
[data-mode="loss"] {
  --accent: var(--danger);
}

html, body, #root { height: 100%; }
body {
  background: rgb(var(--bg));
  color: rgb(var(--fg));
  font-feature-settings: "tnum" 1, "ss01" 1; /* tabular nums if available */
}

/* Utility helpers for smooth theme transitions */
.theme-fade {
  transition: background var(--dur-fast) var(--ease),
              color var(--dur-fast) var(--ease),
              border-color var(--dur-fast) var(--ease),
              box-shadow var(--dur-fast) var(--ease);
}
```

### Tailwind config mapped to tokens

```js
// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './index.html',
    './src/**/*.{js,jsx,ts,tsx}'
  ],
  theme: {
    extend: {
      colors: {
        background: 'rgb(var(--bg) / <alpha-value>)',
        foreground: 'rgb(var(--fg) / <alpha-value>)',
        muted: 'rgb(var(--muted) / <alpha-value>)',
        accent: 'rgb(var(--accent) / <alpha-value>)',
        primary: 'rgb(var(--primary) / <alpha-value>)',
        success: 'rgb(var(--success) / <alpha-value>)',
        danger: 'rgb(var(--danger) / <alpha-value>)',
      },
      boxShadow: {
        card: '0 8px 24px rgba(0,0,0,0.08)',
        hover: '0 12px 28px rgba(0,0,0,0.12)'
      },
      borderRadius: {
        xl: '1rem',
        '2xl': '1.25rem'
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'Segoe UI', 'Roboto', 'Arial', 'sans-serif']
      },
      transitionTimingFunction: {
        elastic: 'cubic-bezier(0.22, 1, 0.36, 1)'
      }
    }
  },
  plugins: []
}
```

### Spacing & layout

* **Spacing scale**: 4, 8, 12, 16, 24, 32, 40, 64 (Tailwind defaults work well).
* **Cards**: rounded-2xl, shadow-card, 1px border on light surfaces.
* **Layout**: mobile stack → tablet centered card → desktop split (inputs left, results right).

### Motion language

* **Entry**: fade + translateY(12px), 60ms stagger
* **Theme flip**: 200ms fade of `accent`, background, borders
* **Numbers**: spring roll-up to reduce abrupt jumps
* **Charts**: line reveal left→right with ease

---

## 2) UI Components

**AppShell**: top bar (logo/brand), content grid.

**InputCard**: date picker, amount input, ticker select, submit button.

**ResultCard**: KPI trio (Initial, Current, Change%), chart, share/try-again.

**QuoteBanner**: sits **above** chart, tone maps to mode.

**ChartArea**: Recharts line with gradient; stroke uses current `--accent`.

---

## 3) Quotes (sample JSON)

```json
// src/quotes.json
[
  { "id": "p_rocket_towel", "tone": "praise", "severity": 1, "min_delta_pct": 5, "max_delta_pct": 1000, "text": "Rocket mode. Don’t forget your towel." },
  { "id": "p_good_calls", "tone": "praise", "severity": 2, "min_delta_pct": 20, "max_delta_pct": 1000, "text": "Good calls age like fine wine." },
  { "id": "r_bold_strategy", "tone": "roast", "severity": 2, "min_delta_pct": -100, "max_delta_pct": -5, "text": "Buying high and selling lower? Bold strategy, Cotton." },
  { "id": "r_limbo", "tone": "roast", "severity": 1, "min_delta_pct": -10, "max_delta_pct": -5, "text": "Portfolio doing the limbo — how low can it go?" }
]
```

---

## 4) Slick JavaScript Utilities

```js
// src/utils/themeEngine.js
export class ThemeEngine {
  constructor(root = document.documentElement) {
    this.root = root;
    this.mode = 'base';
  }
  setMode(mode) {
    const next = ['base', 'profit', 'loss'].includes(mode) ? mode : 'base';
    this.root.setAttribute('data-mode', next);
    this.mode = next;
    window.dispatchEvent(new CustomEvent('theme:change', { detail: { mode: next } }));
  }
}
```

```js
// src/utils/formatters.js
export const formatCurrency = (n, currency = 'USD') =>
  new Intl.NumberFormat('en-US', { style: 'currency', currency, maximumFractionDigits: 2 }).format(n);

export const formatPercent = (n) =>
  new Intl.NumberFormat('en-US', { style: 'percent', maximumFractionDigits: 2 }).format(n / 100);
```

```js
// src/utils/numberAnimator.js
import { animate } from 'framer-motion';

export function animateNumber(el, to, { from = 0, duration = 0.6, ease = [0.22, 1, 0.36, 1], formatter = (v)=>v.toFixed(2) } = {}) {
  if (!el) return;
  const controls = animate(from, to, {
    duration,
    ease,
    onUpdate: (v) => { el.textContent = formatter(v); }
  });
  return () => controls.stop();
}
```

```js
// src/utils/quoteEngine.js
export class QuoteEngine {
  constructor(quotes = [], memory = 5) {
    this.quotes = quotes;
    this.memory = memory;
    this.recent = [];
  }
  pick(deltaPct) {
    const eligible = this.quotes.filter(q => deltaPct >= q.min_delta_pct && deltaPct <= q.max_delta_pct);
    if (eligible.length === 0) return null;
    // Weight by severity (higher severity -> more weight)
    const weighted = eligible.flatMap(q => Array(Math.max(1, q.severity)).fill(q));
    // Avoid last N quotes
    const filtered = weighted.filter(q => !this.recent.includes(q.id));
    const pool = filtered.length ? filtered : weighted;
    const choice = pool[Math.floor(Math.random() * pool.length)];
    // update memory
    this.recent.push(choice.id);
    if (this.recent.length > this.memory) this.recent.shift();
    return choice;
  }
}
```

```js
// src/utils/scenario.js
export function computeScenario({ initialAmount, historicalPrice, currentPrice }) {
  const shares = initialAmount / historicalPrice;
  const currentValue = shares * currentPrice;
  const profit = currentValue - initialAmount;
  const profitPct = (profit / initialAmount) * 100;
  const mode = profit >= 0 ? 'profit' : 'loss';
  return { shares, currentValue, profit, profitPct, mode };
}
```

---

## 5) React App Scaffold

```jsx
// src/App.jsx
import { useEffect, useMemo, useRef, useState } from 'react';
import { ThemeEngine } from './utils/themeEngine';
import { formatCurrency, formatPercent } from './utils/formatters';
import { animateNumber } from './utils/numberAnimator';
import { QuoteEngine } from './utils/quoteEngine';
import quotes from './quotes.json';
import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid } from 'recharts';

const theme = new ThemeEngine();
const quoteEngine = new QuoteEngine(quotes);

function useAccentColor() {
  return getComputedStyle(document.documentElement).getPropertyValue('--accent').trim();
}

function QuoteBanner({ text, mode }) {
  return (
    <div className={`theme-fade mb-4 rounded-xl border px-4 py-3 ${mode === 'profit' ? 'border-success/30 bg-success/5' : mode === 'loss' ? 'border-danger/30 bg-danger/5' : 'border-primary/20 bg-primary/5'}`}>
      <p className="text-base font-semibold tracking-tight">{text}</p>
    </div>
  );
}

function KPI({ label, value, sub }) {
  return (
    <div className="rounded-xl border bg-white/70 backdrop-blur px-4 py-3 shadow-card theme-fade">
      <div className="text-sm text-muted">{label}</div>
      <div className="mt-1 text-2xl font-semibold tabular-nums">{value}</div>
      {sub && <div className="text-sm text-muted mt-1">{sub}</div>}
    </div>
  );
}

export default function App() {
  const [symbol, setSymbol] = useState('TSLA');
  const [amount, setAmount] = useState(1000);
  const [date, setDate] = useState('2023-10-06');
  const [data, setData] = useState(null);
  const [mode, setMode] = useState('base');
  const resultRef = useRef(null);

  // Mock fetchers (replace with your serverless endpoints)
  async function fetchHistoricalPrice(sym, isoDate) {
    // e.g., GET /api/historical?symbol=TSLA&date=2023-10-06
    return 250; // placeholder
  }
  async function fetchCurrentPrice(sym) {
    // e.g., GET /api/quote?symbol=TSLA
    return 410; // placeholder
  }
  async function fetchSeries(sym, isoDate) {
    // e.g., GET /api/series?symbol=TSLA&from=isoDate
    // Return simplified timeseries for chart
    const points = Array.from({ length: 30 }, (_, i) => ({
      t: i,
      v: 250 + i * 5 + (Math.sin(i / 2) * 6)
    }));
    return points;
  }

  async function onSubmit(e) {
    e.preventDefault();
    const [hp, cp, series] = await Promise.all([
      fetchHistoricalPrice(symbol, date),
      fetchCurrentPrice(symbol),
      fetchSeries(symbol, date)
    ]);
    const initialAmount = Number(amount);
    const shares = initialAmount / hp;
    const currentValue = shares * cp;
    const profit = currentValue - initialAmount;
    const profitPct = (profit / initialAmount) * 100;
    const nextMode = profit >= 0 ? 'profit' : 'loss';
    const quote = quoteEngine.pick(profitPct);

    setData({
      hp, cp, series,
      shares, currentValue, profit, profitPct,
      quote: quote?.text || (nextMode === 'profit' ? 'Solid moves.' : 'Tough scene.')
    });
    setMode(nextMode);
    theme.setMode(nextMode);
  }

  useEffect(() => {
    if (!resultRef.current || !data) return;
    const stop = animateNumber(resultRef.current, data.profit, {
      from: 0,
      formatter: (v) => formatCurrency(v)
    });
    return () => stop && stop();
  }, [data]);

  const accent = useMemo(() => useAccentColor(), [mode]);

  return (
    <div className="min-h-screen theme-fade" data-mode={mode}>
      <header className="sticky top-0 z-10 bg-white/70 backdrop-blur border-b">
        <div className="mx-auto max-w-6xl px-4 py-3 flex items-center gap-4">
          <div className="h-8 w-8 rounded-lg bg-accent" />
          <h1 className="font-bold tracking-tight">NO FOMO</h1>
          <div className="ml-auto text-sm text-muted">finance meets dopamine</div>
        </div>
      </header>

      <main className="mx-auto max-w-6xl px-4 grid grid-cols-1 lg:grid-cols-12 gap-6 py-8">
        {/* Inputs */}
        <section className="lg:col-span-4">
          <form onSubmit={onSubmit} className="rounded-2xl border bg-white/80 backdrop-blur p-4 shadow-card theme-fade">
            <h2 className="text-lg font-semibold mb-3">What if…</h2>
            <label className="block text-sm text-muted mb-1">Ticker</label>
            <select value={symbol} onChange={e=>setSymbol(e.target.value)} className="mb-3 w-full rounded-xl border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-accent/40">
              <option>TSLA</option>
              <option>AAPL</option>
              <option>NVDA</option>
              <option>BTC-USD</option>
              <option>ETH-USD</option>
            </select>

            <label className="block text-sm text-muted mb-1">Amount (USD)</label>
            <input type="number" value={amount} onChange={e=>setAmount(e.target.value)} min={10} step={10} className="mb-3 w-full rounded-xl border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-accent/40" />

            <label className="block text-sm text-muted mb-1">Purchase date</label>
            <input type="date" value={date} onChange={e=>setDate(e.target.value)} className="mb-4 w-full rounded-xl border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-accent/40" />

            <button type="submit" className="w-full rounded-xl bg-accent text-white py-2 font-semibold shadow hover:shadow-hover transition-shadow">Regret It</button>
          </form>
        </section>

        {/* Results */}
        <section className="lg:col-span-8">
          {!data ? (
            <div className="rounded-2xl border bg-white/70 backdrop-blur p-8 text-muted text-center theme-fade">Enter a scenario to see your alternate timeline.</div>
          ) : (
            <div className="rounded-2xl border bg-white/80 backdrop-blur p-4 shadow-card theme-fade">
              <QuoteBanner mode={mode} text={data.quote} />

              {/* KPIs */}
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 mb-4">
                <KPI label="Initial" value={formatCurrency(Number(amount))} />
                <KPI label="Current" value={formatCurrency(data.currentValue)} sub={`${data.shares.toFixed(4)} shares`} />
                <KPI label="Change" value={<span ref={resultRef} className="tabular-nums">$0.00</span>} sub={formatPercent(data.profitPct)} />
              </div>

              {/* Chart */}
              <div className="h-64 rounded-xl border p-3">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={data.series} margin={{ top: 12, right: 12, bottom: 0, left: 0 }}>
                    <CartesianGrid strokeDasharray="3 3" stroke="rgba(0,0,0,0.06)" />
                    <XAxis dataKey="t" tick={{ fontSize: 12, fill: 'rgba(0,0,0,0.5)' }} />
                    <YAxis domain={["auto", "auto"]} tick={{ fontSize: 12, fill: 'rgba(0,0,0,0.5)' }} />
                    <Tooltip formatter={(v)=> v.toFixed ? v.toFixed(2) : v} />
                    <Line type="monotone" dataKey="v" dot={false} stroke={`rgb(${accent})`} strokeWidth={2.5} />
                  </LineChart>
                </ResponsiveContainer>
              </div>

              {/* CTAs */}
              <div className="mt-4 flex gap-3">
                <button onClick={()=>theme.setMode('base') || setMode('base')} className="rounded-xl border px-4 py-2">Try Again</button>
                <button className="rounded-xl border px-4 py-2">Share Result</button>
              </div>
            </div>
          )}
        </section>
      </main>
    </div>
  );
}
```

```jsx
// src/main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './theme.css'
import './index.css' // Tailwind build output

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)
```

```html
<!-- index.html -->
<!doctype html>
<html lang="en" data-mode="base">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>NO FOMO</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
```

---

## 6) Dev notes & setup

**Install deps**

```bash
npm i react react-dom framer-motion recharts
npm i -D tailwindcss postcss autoprefixer vite
npx tailwindcss init -p
```

**Tailwind entry** (example `src/index.css`)

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

**Vite scripts** (in `package.json`)

```json
{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  }
}
```

**Replace mock fetchers** in `App.jsx` with your serverless API calls to Polygon/Alpha Vantage.

---

## 7) Why this works

* **Token-first** = instant theming + easy future rebrands.
* **Micro-motions** = perceived speed + delight.
* **QuoteEngine** = personality scaled with rigor (severity + memory).
* **Minimal deps** = fast cold start, easy deploy.

> Next steps: wire real API, add image share (HTML-to-canvas), and ship.
